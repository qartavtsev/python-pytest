# Название workflow
name: testops_python

# переменные окружения
env:
  ENDPOINT: https://demo.qatools.cloud/
  PROJECT_ID: 165
  TOKEN: ${{ secrets.TOKEN }}
  ALLURE_JOB_RUN_ID: ${{ github.event.inputs.ALLURE_JOB_RUN_ID }}
  ALLURE_RESULTS: "allure-results"
  BROWSER: ${{ inputs.BROWSER || 'OperaGX' }}
  OS: ${{ inputs.OS || 'Win_11' }}
  BRANCH: ${{ github.ref_name }}

# Триггеры для запуска workflow
on:
# по расписанию
  schedule:
    - cron: "0 0 * * *"

# пуш и пулл реквест
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
     
# вручную    
  workflow_dispatch:
    inputs:
      BROWSER:
        description: Browser
        required: false
        default: "OperaGX"
      OS:
        description: OS
        required: false
        default: "Win_11"
      ALLURE_JOB_RUN_ID:
        description: "ALLURE_JOB_RUN_ID - service parameter (leave blank)"
        required: false
        default: ""
      ALLURE_USERNAME:
        description: "ALLURE_USERNAME - service parameter (leave blank)"
        required: false
        default: ""

jobs:
  autotests: 
    name: Run tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      # подготовка окружения
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # отладочные шаги, для проверки работы с переменными
      - name: Debug environment variables
        run: |
          echo "ENDPOINT: $endpoint"
          echo "PROJECT_ID: $project_id"
        env:
          allure_endpoint: ${{ env.ENDPOINT }}
          allure_project_id: ${{ env.PROJECT_ID }}

      # установка allurectl (связующее звено с ТестОпс)
      - name: Install allurectl
        uses: allure-framework/setup-allurectl@v1
        with:
          allure-endpoint: ${{ env.ENDPOINT }}
          allure-token: ${{ env.TOKEN }}
          allure-project-id: ${{ env.PROJECT_ID }}

      # создаем директорию для результатов
      - name: Ensure allure-results directory exists
        run: |
          mkdir -p ${ALLURE_RESULTS}

      # запускаем тесты и сразу следим за выполнением
      # отправляем данные в ТестОпс по мере поступления
      - name: Run tests
        run: allurectl watch -- pytest --alluredir=${ALLURE_RESULTS} --capture=no

      # проверяем если файлы с отчетами
      - name: Check allure-results directory
        if: always()
        run: |
          ls -la ${ALLURE_RESULTS}
